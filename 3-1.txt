/*--------------------------------------------------------------------------------------------------------------------------
C-Programming Asignment 3-1 : 최대공약수와 최소공약수를 구해주는 프로그램.

학번 : B611019
전공 : 컴퓨터공학과 2학년
이름 : 김남일

날짜 : 2019년 05월 19일

주요 내용 : 
1) GCD함수는 두 개의 변수 a(큰 수), b(작은 수)를 입력받는다. 
두 수를 입력할때 b가 0이면 그대로 a를 반환한다.
b가 0이 아닐시에는 a에 b가 들어가고 b에는 a%b값이 들어간다. 즉 왼쪽으로 한칸식 이동한다.
return 값 GCD(y, x%y)을 넣어주어 재귀함수를 통해 구현하였다.
(ex.1 참조)

2) LCM함수는 기존의 두 수를 곱한값에 최대공약수를 나눠주면 
최소공배수를 구할 수 있으므로 작은 수가 0이면 큰 수를 반환하고
0이 아닐 시에는 return 값 (x*y)/GCD(y, x%y)를 통해 구현하였다.
(ex.2 참조)

                 a     b   나머지 (a, b, 나머지 모두 왼쪽으로 한칸씩 이동하는 형식이다.)
ex.1)        | 18    12     6 
             |_______________
             | 12     6     0
	  |_______________
	           6     0    이때 b = 0 아므로 a가 최대공약수이다.



				 a     b       
ex.2)       2 | 18    12  (2 x 3 x "3") (2 x 3 x "2")     
               |__________ 
             3 |  9     6  (2 x 3)  (2 x 3)   
	    |__________
	       3     2    (3)    (2)  
			
	두 수 18(2 x 3 x 3) 12(2 x 3 x 2)의 곱은 (2 x 3 x 3 x 2 x 2 x 3)이다.  
	이때 최소공배수는 2 x 3 x 3 x 2이고, 최대공약수는 2 x 3이므로   
    두 수를 곱한 값에서 최대공약수만큼을 나눠주면 최소공배수를 구할 수 있다. 

----------------------------------------------------------------------------------------------------------------------------*/
#include <stdio.h>

int GCD(int x, int y)
{
	if (y == 0)
		return x;
	else
		return GCD(y, x%y);
}

int LCM(int x, int y)
{
	if (y == 0)
		return x;
	else
		return (x*y)/GCD(y, x%y);
}

int main() {

	int a,b;

	printf("최대공약수를 구할 두 수를 입력하시오: \n");
	scanf("%d %d", &a, &b);

	printf("%d\n",GCD(a,b));

	printf("최소공배수를 구할 두 수를 입력하시오: \n");
	scanf("%d %d", &a, &b);

	printf("%d\n", LCM(a, b));

	return 0;
}
